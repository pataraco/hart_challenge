---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates an AWS CodePipeline Pipeline from a GitHub source and associated webhook'


Parameters:

  ArtifactStoreLocation:
    Description: 'The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same AWS Region as the pipeline to store your pipeline artifacts'
    Type: String

  Environment:
    Description: 'Name of Environment'
    Type: String

  GitHubRepo:
    Description: 'The GitHub repositorty HTTPS clone URL that contains the source code'
    Type: String

  GitHubUser:
    Description: 'The GitHub user that has access to the repositorty'
    Type: String

  GitHubBranch:
    Default: 'master'
    Description: 'The GitHub branch to reference in the repositorty'
    Type: String

  GitHubOAuthToken:
    Description: 'The GitHub authentication token that allows CodePipeline to perform operations on the GitHub repository. The entry is always displayed as a mask of four asterisks'
    NoEcho: true
    Type: String

  Name:
    AllowedPattern: '[A-Za-z0-9.@\-_]{1,100}'
    Default: 'not-given'
    Description: 'The name of the pipeline. From 1 to 100 characters long (default: ${Project}-${Environment}'
    MinLength: 1
    MaxLength: 100
    Type: String

  Project:
    Default: ''
    Description: 'Name of the project being deployed'
    Type: String

  PythonLambdaLayerCodeBuildProjectName:
    Description: 'Name of the CodeBuild project for building the Python Lambda layer'
    Type: String

  RestartExecutionOnUpdate:
    AllowedValues: ['true', 'false']
    Default: 'false'
    Description: 'Indicates whether to rerun the CodePipeline pipeline after you update it. (default: false)'
    Type: String

  ServerlessCodeBuildProjectName:
    Description: 'Name of the CodeBuild project for Serverless deployments'
    Type: String

  WebHookSecret:
    Description: 'The secret used to create the CodePipeline webhook for use by GitHub. The entry is always displayed as a mask of four asterisks'
    NoEcho: true
    Type: String


Conditions:

  PipelineNameGiven: !Not [!Equals [!Ref Name, 'not-given']]


Resources:

  IamManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub 'Policy used for trust relationship with CodePipeline for ${Project}-${Environment}'
      ManagedPolicyName: !Sub '${Project}-${Environment}-codepipeline-service'
      PolicyDocument:
        Statement:
          - Sid: PassRoleSpecificServices
            Action:
              - iam:PassRole
            Effect: Allow
            Resource: ['*']
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
          - Sid: FullAccessSpecificServices
            Action:
              - autoscaling:*
              - cloudformation:*
              - cloudwatch:*
              - ec2:*
              - ecs:*
              - elasticbeanstalk:*
              - elasticloadbalancing:*
              - rds:*
              - s3:*
              - sns:*
              - sqs:*
            Effect: Allow
            Resource: ['*']
          - Sid: LimitedAccessSpecificServices
            Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
              - codestar-connections:UseConnection
              - devicefarm:CreateUpload
              - devicefarm:GetRun
              - devicefarm:GetUpload
              - devicefarm:ListDevicePools
              - devicefarm:ListProjects
              - devicefarm:ScheduleRun
              - ecr:DescribeImages
              - lambda:InvokeFunction
              - lambda:ListFunctions
              - opsworks:CreateDeployment
              - opsworks:DescribeApps
              - opsworks:DescribeCommands
              - opsworks:DescribeDeployments
              - opsworks:DescribeInstances
              - opsworks:DescribeStacks
              - opsworks:UpdateApp
              - opsworks:UpdateStack
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:UpdateProduct
            Effect: Allow
            Resource: ['*']
        Version: '2012-10-17'

  IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal: {Service: 'codepipeline.amazonaws.com'}
      Description: !Sub 'Allows CodeBuild to build/deploy resources for ${Project} ${Environment}'
      ManagedPolicyArns:
        - !Ref IamManagedPolicy
      RoleName: !If
        - PipelineNameGiven
        - !Sub 'codepipeline-${Name}-service-role'
        - !Sub 'codepipeline-${Project}-${Environment}-service-role'

  CodePipelinePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      # TODO: add conditional to create/use a S3 bucket if not specified
      ArtifactStore:
        Location: !Ref ArtifactStoreLocation
        Type: S3
      Name: !If [PipelineNameGiven, !Ref Name, !Sub '${Project}-${Environment}']
      RestartExecutionOnUpdate: !Ref RestartExecutionOnUpdate
      RoleArn: !GetAtt IamRole.Arn
      Stages:
        # get the source code
        - Name: GetSourceCode
          Actions:
            - Name: GetGitHubSourceCode
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
                Owner: !Ref GitHubUser
                PollForSourceChanges: false
                Repo: !Ref GitHubRepo
              Namespace: GitHubSourceCode
              OutputArtifacts:
                - Name: GitHubSource
              RunOrder: 1

        # build lambda layers
        - Name: BuildLambdaLayers
          Actions:
            # build python lambda layer
            - Name: BuildPythonLambdaLayer
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref PythonLambdaLayerCodeBuildProjectName
                PrimarySource: GitHubSource
              Namespace: BuildPythonLambdaLayer
              InputArtifacts:
                - Name: GitHubSource
              # OutputArtifacts:
              #   - Name: GitHubSource
              RunOrder: 1

#       # run unit tests
#       - Name: TestCode
#         Actions:
#           - Name: TestPythonCode
#             ActionTypeId:
#               Category: Test
#               Owner: AWS
#               Provider: CodeBuild
#               Version: 1
#             Configuration:
#               Owner: !Ref GitHubUser
#               Repo: !Ref GitHubRepo
#               PollForSourceChanges: false
#               Branch: !Ref GitHubRepo
#             Namespace: TestPythonCode
#             OutputArtifacts:
#               - Name: GitHubSource
#             RunOrder: 1

#       # get manual approval
#       - Name: ManualApproval
#         Actions:
#           - Name: GetManualApproval
#             ActionTypeId:
#               Category: Approval
#               Owner: AWS
#               Provider: Manual
#               Version: 1
#             Configuration:
#               CustomData: Manual approval needed for deployment
#               ExternalEntiyLink: staging.turncar.com
#               NotificationArn: !Ref SnsApprovals
#             InputArtifacts:
#               - Name: String
#             ################
#             Namespace: GetManualApproval
#             OutputArtifacts:
#               - Name: String
#             RunOrder: 1

        # deploy serverless
        - Name: DeployServerless
          Actions:
            - Name: BuildServerless
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref ServerlessCodeBuildProjectName
                PrimarySource: GitHubSource
                # EnvironmentVariables: '[{"name":"TEST_VARIABLE","value":"TEST_VALUE","type":"PLAINTEXT"},{"name":"ParamStoreTest","value":"PARAMETER_NAME","type":"PARAMETER_STORE"}]'
              Namespace: BuildServerless
              InputArtifacts:
                - Name: GitHubSource
              # OutputArtifacts:
              #   - Name: GitHubSource
              RunOrder: 1

#     ######## stage/action template [begin] (TODO: remove) ################
#       - Name: DeployServerless
#         Actions:
#           - Name: ActionName
#             ActionTypeId:
#               Category: Source, Build, Test, Deploy, Invoke, Approval
#               Owner: AWS, ThirdParty, Custom
#               Provider: ProviderName
#               # Approval: Manual
#               # Build: CodeBuild, Custom Jenkins, Custom TeamCity
#               # Deploy: Amazon S3, AWS CloudFormation, CodeDeploy
#               # Invoke: AWS Lambda
#               # Source: Amazon S3, Amazon ECR, CodeCommit, GitHub
#               # Test: CodeBuild, AWS Device Farm, Custom Jenkins
#               Version: 1
#             Configuration:
#               ApplicationName: !Ref ApplicationName
#               DeploymentGroupName: !Ref DeploymentGroupName
#               S3Bucket: !Ref SourceS3Bucket
#               S3ObjectKey: !Ref SourceS3ObjectKey
#             InputArtifacts:
#               - Name: SeeDocsForProvider
#             Namespace: ActionName
#             OutputArtifacts:
#               - Name: SeeDocsForProvider
#             RunOrder: Integer
#     ######## stage/action template [end] (TODO: remove) ################

      Tags:
        - Key: Name
          Value: !If [PipelineNameGiven, !Ref Name, !Sub '${Project}-${Environment}']

  CodePipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref WebHookSecret
      Filters:
        # up to 5 rules allowed - all must pass
        - JsonPath: '$.ref'
          MatchEquals: refs/heads/{Branch}
        # - JsonPath: '$.pusher.name'
        #   MatchEquals: $GITHUB_USER
      Name: !If
        - PipelineNameGiven
        - !Sub '${Name}-github'
        - !Sub '${Project}-${Environment}-github'
      RegisterWithThirdParty: true
      TargetAction: GetGitHubSourceCode
      TargetPipeline: !Ref CodePipelinePipeline
      TargetPipelineVersion: !GetAtt CodePipelinePipeline.Version


Outputs:

  PipelineName:
    Description: 'The name of the CodePipeline Pipeline'
    Export: {'Name': !Sub '${AWS::StackName}-PipelineName'}
    Value: !Ref CodePipelinePipeline

  PipelineVersion:
    Description: 'The version of the CodePipeline Pipeline'
    Export: {'Name': !Sub '${AWS::StackName}-PipelineVersion'}
    Value: !GetAtt CodePipelinePipeline.Version
