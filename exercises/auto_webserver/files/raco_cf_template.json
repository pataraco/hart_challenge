#######################################
{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormer Beta - template creation prototype application. This tool allows you to create an AWS CloudFormation template from the AWS resources in your AWS account. **Warning** This template creates a single EC2 instance in your account to run the application - you will be billed for the instance at normal AWS EC2 rates.",

  "Parameters" : {

    "Username" : {
      "Description" : "Username to log in to CloudFormer",
      "Type" : "String"
    },
    "Password" : {
      "Description" : "Password to log in to CloudFormer",
      "Type" : "String",
      "NoEcho" : "true"
    },
    "VPCSelection": {
      "Description": "This setting will control if the Cloudformer Web server will launch in the default VPC or if a new VPC will be created, or if you wish to launch into an existing non-default VPC.",
      "Type": "String",
      "Default": "CreateNewVPC",
      "AllowedValues": [
        "Default",
        "CreateNewVPC"
      ],
      "ConstraintDescription": "must be either Default or CreateNewVPC"
    }
  },
  "Conditions": {
    "DefaultVPC": {
      "Fn::Equals": [
        {
          "Ref": "VPCSelection"
        },
        "Default"
      ]
    },
    "CreateNewVPC": {
      "Fn::Equals": [
        {
          "Ref": "VPCSelection"
        },
        "CreateNewVPC"
      ]
    }
  },

  "Mappings" : {
    "Region2Examples" : {
      "us-east-1"      : { "Examples" : "https://s3.amazonaws.com/cloudformation-examples-us-east-1" },
      "us-west-2"      : { "Examples" : "https://s3-us-west-2.amazonaws.com/cloudformation-examples-us-west-2" },
      "us-west-1"      : { "Examples" : "https://s3-us-west-1.amazonaws.com/cloudformation-examples-us-west-1" },
      "eu-west-1"      : { "Examples" : "https://s3-eu-west-1.amazonaws.com/cloudformation-examples-eu-west-1" },
      "eu-central-1"   : { "Examples" : "https://s3-eu-central-1.amazonaws.com/cloudformation-examples-eu-central-1" },
      "ap-southeast-1" : { "Examples" : "https://s3-ap-southeast-1.amazonaws.com/cloudformation-examples-ap-southeast-1" },
      "ap-northeast-1" : { "Examples" : "https://s3-ap-northeast-1.amazonaws.com/cloudformation-examples-ap-northeast-1" },
      "ap-southeast-2" : { "Examples" : "https://s3-ap-southeast-2.amazonaws.com/cloudformation-examples-ap-southeast-2" },
      "ap-northeast-2" : { "Examples" : "https://s3-ap-northeast-2.amazonaws.com/cloudformation-examples-ap-northeast-2" },
      "ap-south-1"     : { "Examples" : "https://s3-ap-south-1.amazonaws.com/cloudformation-examples-ap-south-1" },
      "us-east-2"      : { "Examples" : "https://s3-us-east-2.amazonaws.com/cloudformation-examples-us-east-2" },
      "sa-east-1"      : { "Examples" : "https://s3-sa-east-1.amazonaws.com/cloudformation-examples-sa-east-1" },
      "cn-north-1"     : { "Examples" : "https://s3.cn-north-1.amazonaws.com.cn/cloudformation-examples-cn-north-1" },
      "ca-central-1"   : { "Examples" : "https://s3-ca-central-1.amazonaws.com/cloudformation-examples-ca-central-1" },
      "eu-west-2"      : { "Examples" : "https://s3-eu-west-2.amazonaws.com/cloudformation-examples-eu-west-2" }
    }
,
    "Region2Principal" : {
      "us-east-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "us-west-2"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "us-west-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "eu-west-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ap-southeast-1" : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ap-northeast-1" : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ap-southeast-2" : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ap-northeast-2" : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ap-south-1"     : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "us-east-2"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "sa-east-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "cn-north-1"     : { "EC2Principal" : "ec2.amazonaws.com.cn", "OpsWorksPrincipal" : "opsworks.amazonaws.com.cn" },
      "eu-central-1"   : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "eu-west-2"   : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ca-central-1"   : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" }
    }
,
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.nano"     : { "Arch" : "HVM64"  },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "t2.large"    : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   },
      "m1.medium"   : { "Arch" : "PV64"   },
      "m1.large"    : { "Arch" : "PV64"   },
      "m1.xlarge"   : { "Arch" : "PV64"   },
      "m2.xlarge"   : { "Arch" : "PV64"   },
      "m2.2xlarge"  : { "Arch" : "PV64"   },
      "m2.4xlarge"  : { "Arch" : "PV64"   },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.large"    : { "Arch" : "HVM64"  },
      "m4.xlarge"   : { "Arch" : "HVM64"  },
      "m4.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.4xlarge"  : { "Arch" : "HVM64"  },
      "m4.10xlarge" : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "PV64"   },
      "c1.xlarge"   : { "Arch" : "PV64"   },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "c4.large"    : { "Arch" : "HVM64"  },
      "c4.xlarge"   : { "Arch" : "HVM64"  },
      "c4.2xlarge"  : { "Arch" : "HVM64"  },
      "c4.4xlarge"  : { "Arch" : "HVM64"  },
      "c4.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "g2.8xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "d2.xlarge"   : { "Arch" : "HVM64"  },
      "d2.2xlarge"  : { "Arch" : "HVM64"  },
      "d2.4xlarge"  : { "Arch" : "HVM64"  },
      "d2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    },

    "AWSInstanceType2NATArch" : {
      "t1.micro"    : { "Arch" : "NATPV64"   },
      "t2.nano"     : { "Arch" : "NATHVM64"  },
      "t2.micro"    : { "Arch" : "NATHVM64"  },
      "t2.small"    : { "Arch" : "NATHVM64"  },
      "t2.medium"   : { "Arch" : "NATHVM64"  },
      "t2.large"    : { "Arch" : "NATHVM64"  },
      "m1.small"    : { "Arch" : "NATPV64"   },
      "m1.medium"   : { "Arch" : "NATPV64"   },
      "m1.large"    : { "Arch" : "NATPV64"   },
      "m1.xlarge"   : { "Arch" : "NATPV64"   },
      "m2.xlarge"   : { "Arch" : "NATPV64"   },
      "m2.2xlarge"  : { "Arch" : "NATPV64"   },
      "m2.4xlarge"  : { "Arch" : "NATPV64"   },
      "m3.medium"   : { "Arch" : "NATHVM64"  },
      "m3.large"    : { "Arch" : "NATHVM64"  },
      "m3.xlarge"   : { "Arch" : "NATHVM64"  },
      "m3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.large"    : { "Arch" : "NATHVM64"  },
      "m4.xlarge"   : { "Arch" : "NATHVM64"  },
      "m4.2xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.4xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.10xlarge" : { "Arch" : "NATHVM64"  },
      "c1.medium"   : { "Arch" : "NATPV64"   },
      "c1.xlarge"   : { "Arch" : "NATPV64"   },
      "c3.large"    : { "Arch" : "NATHVM64"  },
      "c3.xlarge"   : { "Arch" : "NATHVM64"  },
      "c3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "c3.4xlarge"  : { "Arch" : "NATHVM64"  },
      "c3.8xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.large"    : { "Arch" : "NATHVM64"  },
      "c4.xlarge"   : { "Arch" : "NATHVM64"  },
      "c4.2xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.4xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.8xlarge"  : { "Arch" : "NATHVM64"  },
      "g2.2xlarge"  : { "Arch" : "NATHVMG2"  },
      "g2.8xlarge"  : { "Arch" : "NATHVMG2"  },
      "r3.large"    : { "Arch" : "NATHVM64"  },
      "r3.xlarge"   : { "Arch" : "NATHVM64"  },
      "r3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "r3.4xlarge"  : { "Arch" : "NATHVM64"  },
      "r3.8xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.xlarge"   : { "Arch" : "NATHVM64"  },
      "i2.2xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.4xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.8xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.xlarge"   : { "Arch" : "NATHVM64"  },
      "d2.2xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.4xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.8xlarge"  : { "Arch" : "NATHVM64"  },
      "hi1.4xlarge" : { "Arch" : "NATHVM64"  },
      "hs1.8xlarge" : { "Arch" : "NATHVM64"  },
      "cr1.8xlarge" : { "Arch" : "NATHVM64"  },
      "cc2.8xlarge" : { "Arch" : "NATHVM64"  }
    }
,
    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"PV64" : "ami-2a69aa47", "HVM64" : "ami-7f6aa912", "HVMG2" : "ami-c5eadcd3"},
      "us-west-2"        : {"PV64" : "ami-7f77b31f", "HVM64" : "ami-f469ad94", "HVMG2" : "ami-aaebfcd3"},
      "us-west-1"        : {"PV64" : "ami-a2490dc2", "HVM64" : "ami-594b0f39", "HVMG2" : "ami-68002c08"},
      "eu-west-1"        : {"PV64" : "ami-4cdd453f", "HVM64" : "ami-c5da42b6", "HVMG2" : "ami-ed947194"},
      "eu-west-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-896369ed", "HVMG2" : "NOT_SUPPORTED"},
      "eu-central-1"     : {"PV64" : "ami-6527cf0a", "HVM64" : "ami-e526ce8a", "HVMG2" : "ami-cf3294a0"},
      "ap-northeast-1"   : {"PV64" : "ami-3e42b65f", "HVM64" : "ami-7f4db91e", "HVMG2" : "ami-4e0e1f29"},
      "ap-northeast-2"   : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-39448f57", "HVMG2" : "NOT_SUPPORTED"},
      "ap-southeast-1"   : {"PV64" : "ami-df9e4cbc", "HVM64" : "ami-a69b49c5", "HVMG2" : "ami-f35cd290"},
      "ap-southeast-2"   : {"PV64" : "ami-63351d00", "HVM64" : "ami-10361e73", "HVMG2" : "ami-e77c6f84"},
      "ap-south-1"       : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-fdbed492", "HVMG2" : "ami-5b6e1034"},
      "us-east-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-d90c57bc", "HVMG2" : "NOT_SUPPORTED"},
      "ca-central-1"     : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-33f34157", "HVMG2" : "NOT_SUPPORTED"},
      "sa-east-1"        : {"PV64" : "ami-1ad34676", "HVM64" : "ami-aed144c2", "HVMG2" : "NOT_SUPPORTED"},
      "cn-north-1"       : {"PV64" : "ami-77559f1a", "HVM64" : "ami-14519b79", "HVMG2" : "NOT_SUPPORTED"}
    }

  },

  "Resources" : {

    "CFNRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": { "Fn::FindInMap" : [ "Region2Principal", {"Ref" : "AWS::Region"}, "EC2Principal"]}},
            "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/"
      }
    },

    "CFNRolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CloudFormerPolicy",
        "PolicyDocument": {
          "Statement": [ {
            "Effect": "Allow",
            "Action"   : [
              "autoscaling:Describe*",
              "cloudformation:Describe*",
              "cloudformation:List*",
              "cloudfront:List*",
              "cloudFront:Get*",
              "cloudtrail:Describe*",
              "cloudtrail:Get*",
              "cloudwatch:Describe*",
              "dynamodb:List*",
              "dynamodb:Describe*",
              "elasticbeanstalk:Describe*",
              "ec2:Describe*",
              "elasticloadbalancing:Describe*",
              "elasticache:Describe*",
              "rds:Describe*",
              "rds:List*",
              "route53:List*",
              "route53:Get*",
              "s3:List*",
              "s3:Get*",
              "s3:PutObject",
              "sdb:Get*",
              "sdb:List*",
              "sns:Get*",
              "sns:List*",
              "sqs:Get*",
              "sqs:List*",
              "opsworks:Describe*",
              "redshift:Describe*",
              "kinesis:Describe*",
              "kinesis:List*"
            ],
            "Resource": "*"
          } ]
        },
        "Roles": [ { "Ref": "CFNRole" } ]
      }
    },

    "CFNInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "CFNRole" } ]
      }
    },

    "WebServer": {
      "Condition": "DefaultVPC",
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "full_install" : ["base", "cloudformer"]
          },
          "base" : {
            "packages" : {
              "yum" : {
                "gcc"              : [],
                "gcc-c++"          : [],
                "make"             : [],
                "libxml2-devel"    : [],
                "libxslt-devel"    : [],
                "sqlite-devel"     : [],
                "patch"            : [],
                "readline"         : [],
                "readline-devel"   : [],
                "zlib"             : [],
                "zlib-devel"       : [],
                "libyaml-devel"    : [],
                "libffi-devel"     : [],
                "openssl-devel"    : [],
                "bzip2"            : [],
                "autoconf"         : [],
                "automake"         : [],
                "libtool"          : [],
                "bison"            : [],
                "ruby-devel"       : []
              }
            }
          },
          "cloudformer" : {
            "sources" : {
              "/home/ec2-user/cloudformer" : {"Fn::Join" : ["/", [
                                              {"Fn::FindInMap" : ["Region2Examples", {"Ref" : "AWS::Region"}, "Examples"]},
                                              "AWSCloudFormer041.zip" ]]}
            },
            "files" : {
              "/home/ec2-user/setup_cloudformer" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/usr/bin/env bash\n",
                  "cd /home/ec2-user/cloudformer\n",
                  "# Setup the CloudFormer service\n",
                  "mkdir -p vendor/bundle\n",
                  "gem install --local /home/ec2-user/cloudformer/vendor/cache/rake-10.4.2.gem\n",
                  "gem install --local /home/ec2-user/cloudformer/vendor/cache/bundler-1.7.11.gem\n",
                  "gem install --local /home/ec2-user/cloudformer/vendor/cache/bundle-0.0.1.gem\n",
                  "/usr/local/bin/bundle install --local --path /home/ec2-user/cloudformer/vendor/bundle\n",
                  "/usr/local/bin/rake RAILS_ENV=production db:migrate\n",
                  "gem install --local /home/ec2-user/cloudformer/vendor/cache/rack-1.6.0.gem\n",
                  "gem install --local /home/ec2-user/cloudformer/vendor/cache/eventmachine-1.0.4.gem\n",
                  "gem install --local /home/ec2-user/cloudformer/vendor/cache/daemons-1.1.9.gem\n",
                  "gem install --local /home/ec2-user/cloudformer/vendor/cache/thin-1.6.3.gem\n",
                  "# Create certificate and private key for SSL\n",
                  "mkdir -p /home/ec2-user/cloudformer/.ssl\n",
                  "cd /home/ec2-user/cloudformer/.ssl\n",
                  "openssl genrsa -des3 -passout pass:\"" , { "Ref" : "Password" }, "\" -out server.pass.key 1024\n",
                  "openssl rsa -passin pass:\"", { "Ref" : "Password" }, "\" -in server.pass.key -out server.key\n",
                  "openssl req -new -key server.key -out server.csr -subj \"/C=US/ST=Washington/L=Seattle/O=Amazon Web Services/OU=CloudFormer\"\n",
                  "openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n",
                  "rm server.pass.key server.csr\n"
                ]]},
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/home/ec2-user/cloudformer/config/initializers/user.rb" : {
                "content" : { "Fn::Join" : ["", [
                  "USER_NAME = \"", { "Ref" : "Username" }, "\"\n",
                  "PASSWORD = \"", { "Ref" : "Password" }, "\"\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/usr/bin/cloudformer" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/usr/bin/env bash\n",
                  "cd /home/ec2-user/cloudformer\n",
                  "/usr/local/bin/thin start -p 443 -e production -d --ssl --ssl-key-file /home/ec2-user/cloudformer/.ssl/server.key --ssl-cert-file /home/ec2-user/cloudformer/.ssl/server.crt\n"
                ]]},
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_install_cloudformer" : {
                "command" : "/home/ec2-user/setup_cloudformer &> /var/log/setup_cloudformer.log",
                "cwd" : "/home/ec2-user/cloudformer"
              },
              "02_setup_boot" : {
                "command" : "echo '/usr/bin/cloudformer' >> /etc/rc.local",
                "cwd" : "/"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", "t2.small", "Arch" ] } ] },
        "InstanceType"       : "t2.small",
        "SecurityGroups"     : [ {"Ref" : "WebServerSecurityGroup"} ],
        "IamInstanceProfile" : { "Ref" : "CFNInstanceProfile" },
        "UserData"           : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "yum update -y aws-cfn-bootstrap\n",

          "/opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackId" },
          "         --resource WebServer ",
          "         --configsets full_install ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",

          "/opt/aws/bin/cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackId" },
          "         --resource WebServer ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT30M"
        }
      }
    },

    "WebServerCustomVPC": {
      "Condition": "CreateNewVPC",
      "DependsOn": "RouteVPCAny",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "base": {
            "packages": {
              "yum": {
                "autoconf": [],
                "automake": [],
                "bison": [],
                "bzip2": [],
                "gcc": [],
                "gcc-c++": [],
                "libffi-devel": [],
                "libtool": [],
                "libxml2-devel": [],
                "libxslt-devel": [],
                "libyaml-devel": [],
                "make": [],
                "openssl-devel": [],
                "patch": [],
                "readline": [],
                "readline-devel": [],
                "ruby-devel": [],
                "sqlite-devel": [],
                "zlib": [],
                "zlib-devel": []
              }
            }
          },
          "cloudformer": {
            "commands": {
              "01_install_cloudformer": {
                "command": "/home/ec2-user/setup_cloudformer &> /var/log/setup_cloudformer.log",
                "cwd": "/home/ec2-user/cloudformer"
              },
              "02_setup_boot": {
                "command": "echo '/usr/bin/cloudformer' >> /etc/rc.local",
                "cwd": "/"
              }
            },
            "files": {
              "/home/ec2-user/cloudformer/config/initializers/user.rb": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "USER_NAME = \"",
                      {
                        "Ref": "Username"
                      },
                      "\"\n",
                      "PASSWORD = \"",
                      {
                        "Ref": "Password"
                      },
                      "\"\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/home/ec2-user/setup_cloudformer": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/usr/bin/env bash\n",
                      "cd /home/ec2-user/cloudformer\n",
                      "# Setup the CloudFormer service\n",
                      "mkdir -p vendor/bundle\n",
                      "gem install --local /home/ec2-user/cloudformer/vendor/cache/rake-10.4.2.gem\n",
                      "gem install --local /home/ec2-user/cloudformer/vendor/cache/bundler-1.7.11.gem\n",
                      "gem install --local /home/ec2-user/cloudformer/vendor/cache/bundle-0.0.1.gem\n",
                      "/usr/local/bin/bundle install --local --path /home/ec2-user/cloudformer/vendor/bundle\n",
                      "/usr/local/bin/rake RAILS_ENV=production db:migrate\n",
                      "gem install --local /home/ec2-user/cloudformer/vendor/cache/rack-1.6.0.gem\n",
                      "gem install --local /home/ec2-user/cloudformer/vendor/cache/eventmachine-1.0.4.gem\n",
                      "gem install --local /home/ec2-user/cloudformer/vendor/cache/daemons-1.1.9.gem\n",
                      "gem install --local /home/ec2-user/cloudformer/vendor/cache/thin-1.6.3.gem\n",
                      "# Create certificate and private key for SSL\n",
                      "mkdir -p /home/ec2-user/cloudformer/.ssl\n",
                      "cd /home/ec2-user/cloudformer/.ssl\n",
                      "openssl genrsa -des3 -passout pass:\"",
                      {
                        "Ref": "Password"
                      },
                      "\" -out server.pass.key 1024\n",
                      "openssl rsa -passin pass:\"",
                      {
                        "Ref": "Password"
                      },
                      "\" -in server.pass.key -out server.key\n",
                      "openssl req -new -key server.key -out server.csr -subj \"/C=US/ST=Washington/L=Seattle/O=Amazon Web Services/OU=CloudFormer\"\n",
                      "openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n",
                      "rm server.pass.key server.csr\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000755",
                "owner": "root"
              },
              "/usr/bin/cloudformer": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/usr/bin/env bash\n",
                      "cd /home/ec2-user/cloudformer\n",
                      "/usr/local/bin/thin start -p 443 -e production -d --ssl --ssl-key-file /home/ec2-user/cloudformer/.ssl/server.key --ssl-cert-file /home/ec2-user/cloudformer/.ssl/server.crt\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000755",
                "owner": "root"
              }
            },
            "sources": {
              "/home/ec2-user/cloudformer": {
                "Fn::Join": [
                  "/",
                  [
                    {
                      "Fn::FindInMap": [
                        "Region2Examples",
                        {
                          "Ref": "AWS::Region"
                        },
                        "Examples"
                      ]
                    },
                    "AWSCloudFormer041.zip"
                  ]
                ]
              }
            }
          },
          "configSets": {
            "full_install": [
              "base",
              "cloudformer"
            ]
          }
        }
      },
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "CFNInstanceProfile"
        },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", "t2.small", "Arch" ] } ] },
        "InstanceType": "t2.small",
        "SubnetId": {
          "Ref": "VPCSubnet"
        },
        "SecurityGroupIds": [
          {
            "Ref": "WebServerSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackId"
                },
                "         --resource WebServerCustomVPC ",
                "         --configsets full_install ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackId"
                },
                "         --resource WebServerCustomVPC ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    },

    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTPS access via port 443",
        "VpcId": {
          "Fn::If" : [
            "CreateNewVPC",
            {"Ref" : "VPC"},
            {"Ref" : "AWS::NoValue"}
          ]
        },
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },
    "VPC": {
      "Condition": "CreateNewVPC",
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "CloudformwerVPC"
          }
        ],
        "CidrBlock": "10.10.10.0/24",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true"
      }
    },
    "VPCSubnet": {
      "Condition": "CreateNewVPC",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "MapPublicIpOnLaunch": "true",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.10.10.0/24"
      }
    },
    "VPCInternetGateway": {
      "Condition": "CreateNewVPC",
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {}
    },
    "VPCAttachGateway": {
      "Condition": "CreateNewVPC",
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "VPCInternetGateway"
        }
      }
    },
    "VPCRouteTable": {
      "Condition": "CreateNewVPC",
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "CloudformerVPCRouteTable"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "VPCSubnetRouteTableAssociation": {
      "Condition": "CreateNewVPC",
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "VPCSubnet"
        },
        "RouteTableId": {
          "Ref": "VPCRouteTable"
        }
      }
    },
    "RouteVPCAny": {
      "Condition": "CreateNewVPC",
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCAttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VPCInternetGateway"
        }
      }
    }
  },

  "Outputs": {
    "CustomVPCWebsiteURL": {
      "Description": "URL for CloudFormer",
      "Value": 
      {
        "Fn::Join": 
        [
          "",
          [
            "https://",
            {
              "Fn::If" : 
              [
                "CreateNewVPC",
                {
                  "Fn::GetAtt": [
                    "WebServerCustomVPC",
                    "PublicDnsName"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "WebServer",
                    "PublicDnsName"
                  ]
                }
              ]
            }
          ]
        ]
      }
    }
  }
}
#######################################
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "S3 VirusScan",
  "Parameters": {
    "AutoScalingMinSizeParameter": {
      "Description": "Min Size for Auto Scaling (if 0, S3 VirusScan scales down entirely to 0 EC2 instances!)",
      "Type": "Number",
      "Default": "1",
      "MinValue": "0"
    },
    "AutoScalingMaxSizeParameter": {
      "Description": "Max Size for Auto Scaling",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1"
    },
    "VPCParameter": {
      "Description": "VPC",
      "Type": "AWS::EC2::VPC::Id"
    },
    "SubnetsParameter": {
      "Description": "A list of subnets (should be either public or using a S3 VPC endpoint)",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "InstanceTypeParameter": {
      "Description": "Specifies the instance type of the EC2 instance",
      "Type": "String",
      "Default": "t2.micro"
    },
    "KeyNameParameter": {
      "Description": "Provide an EC2 key pair if you want to login via SSH",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "DeleteInfectedFilesParameter": {
      "Description": "Automatically delete infected files",
      "Type": "String",
      "Default": "true",
      "AllowedValues": ["true", "false"]
    }
  },
  "Conditions": {
    "HasKeyNameParameter": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "KeyNameParameter"}]}]}
  },
  "Mappings": {
    "RegionMap": {
      "eu-west-1": {"AMI": "ami-31328842"},
      "ap-southeast-1": {"AMI": "ami-e90dc68a"},
      "ap-southeast-2": {"AMI": "ami-f2210191"},
      "eu-central-1": {"AMI": "ami-e2df388d"},
      "ap-northeast-2": {"AMI": "ami-6598510b"},
      "ap-northeast-1": {"AMI": "ami-f80e0596"},
      "us-east-1": {"AMI": "ami-08111162"},
      "sa-east-1": {"AMI": "ami-1e159872"},
      "us-west-1": {"AMI": "ami-1b0f7d7b"},
      "us-west-2": {"AMI": "ami-c229c0a2"}
    }
  },
  "Resources": {
    "FindingsTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
      }
    },
    "ScanQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "VisibilityTimeout": 300,
        "RedrivePolicy": {
          "deadLetterTargetArn": {"Fn::GetAtt": ["ScanQueueDLQ", "Arn"]},
          "maxReceiveCount": 3
        }
      }
    },
    "ScanQueueFullAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmActions": [{"Ref": "ScanScaleUp"}],
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [{
          "Name": "QueueName",
          "Value": {"Fn::GetAtt": ["ScanQueue", "QueueName"]}
        }],
        "EvaluationPeriods": "1",
        "MetricName": "ApproximateNumberOfMessagesVisible",
        "Namespace": "AWS/SQS",
        "Period": "60",
        "Statistic": "Sum",
        "Threshold": "100"
      }
    },
    "ScanQueueEmptyAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmActions": [{"Ref": "ScanScaleDown"}],
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "Dimensions": [{
          "Name": "QueueName",
          "Value": {"Fn::GetAtt": ["ScanQueue", "QueueName"]}
        }],
        "EvaluationPeriods": "1",
        "MetricName": "ApproximateNumberOfMessagesVisible",
        "Namespace": "AWS/SQS",
        "Period": "60",
        "Statistic": "Sum",
        "Threshold": "0"
      }
    },
    "ScanQueuePolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "AWS":"*"  
            },
            "Action": [
              "SQS:SendMessage"
            ],
            "Resource": {"Fn::GetAtt": ["ScanQueue", "Arn"]}
          }]
        },
        "Queues": [{"Ref": "ScanQueue"}]
      }
    },
    "ScanQueueDLQ": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "MessageRetentionPeriod": 1209600
      }
    },
    "ScanQueueDLQAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Alarm if dead letter queue has messages",
        "Namespace": "AWS/SQS",
        "MetricName": "ApproximateNumberOfMessagesVisible",
        "Dimensions": [{
          "Name": "QueueName",
          "Value": {"Fn::GetAtt": ["ScanQueueDLQ", "QueueName"]}
        }],
        "Statistic": "Sum",
        "Period": "60",
        "EvaluationPeriods": "1",
        "Threshold": "1",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "AlarmActions": [{"Ref": "FindingsTopic"}]
      }
    },
    "ScanAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": "1",
        "LaunchConfigurationName": {"Ref": "ScanLaunchConfiguration"},
        "MaxSize": {"Ref": "AutoScalingMaxSizeParameter"},
        "MinSize": {"Ref": "AutoScalingMinSizeParameter"},
        "VPCZoneIdentifier": {"Ref": "SubnetsParameter"}
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT20M"
        }
      }
    },
    "ScanScaleUp": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {"Ref": "ScanAutoScalingGroup"},
        "Cooldown": "300",
        "ScalingAdjustment": 1
      }
    },
    "ScanScaleDown": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {"Ref": "ScanAutoScalingGroup"},
        "Cooldown": "300",
        "ScalingAdjustment": -1
      }
    },
    "ScanInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{"Ref": "ScanIAMRole"}]
      }
    },
    "ScanIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["ec2.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "s3",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "s3:GetObject*",
                "s3:DeleteObject*"
              ],
              "Resource": [
                "*"
              ]
            }]
          }
        }, {
          "PolicyName": "sqs",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage"
              ],
              "Resource": [
                {"Fn::GetAtt": ["ScanQueue", "Arn"]}
              ]
            }]
          }
        }, {
          "PolicyName": "sns",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "sns:Publish"
              ],
              "Resource": [
                {"Ref": "FindingsTopic"}
              ]
            }]
          }
        }, {
          "PolicyName": "logs",
          "PolicyDocument":{
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Resource": [
                "arn:aws:logs:*:*:*"
              ]
            }]
          }
        }]
      }
    },
    "ScanLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "clamd": [],
                "clamav": [],
                "clamav-update": [],
                "awslogs": []
              },
              "rubygems": {
                "aws-sdk": ["2.2.29"],
                "daemons": ["1.2.3"]
              }
            },
            "sources": {
              "/opt": "https://github.com/widdix/aws-s3-virusscan/archive/master.zip"
            },
            "files": {
              "/etc/awslogs/awslogs.conf": {
                "content": {"Fn::Join": ["", [
                  "[general]", "\n",
                  "state_file = /var/lib/awslogs/agent-state", "\n",
                  "\n",
                  "[/var/log/messages]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/messages", "\n",
                  "buffer_duration = 5000", "\n",
                  "log_stream_name = {instance_id}", "\n",
                  "initial_position = start_of_file", "\n",
                  "log_group_name = /var/log/messages", "\n",
                  "\n",
                  "[/var/log/secure]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/secure", "\n",
                  "buffer_duration = 5000", "\n",
                  "log_stream_name = {instance_id}", "\n",
                  "initial_position = start_of_file", "\n",
                  "log_group_name = /var/log/secure", "\n",
                  "\n",
                  "[/var/log/cron]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/cron", "\n",
                  "buffer_duration = 5000", "\n",
                  "log_stream_name = {instance_id}", "\n",
                  "initial_position = start_of_file", "\n",
                  "log_group_name = /var/log/cron", "\n",
                  "\n",
                  "[/var/log/cloud-init.log]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/cloud-init.log", "\n",
                  "buffer_duration = 5000", "\n",
                  "log_stream_name = {instance_id}", "\n",
                  "initial_position = start_of_file", "\n",
                  "log_group_name = /var/log/cloud-init.log", "\n",
                  "\n",
                  "[/var/log/cfn-init.log]", "\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S", "\n",
                  "file = /var/log/cfn-init.log", "\n",
                  "buffer_duration = 5000", "\n",
                  "log_stream_name = {instance_id}", "\n",
                  "initial_position = start_of_file", "\n",
                  "log_group_name = /var/log/cfn-init.log", "\n",
                  "\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/opt/aws-s3-virusscan-master/s3-virusscan.conf": {
                "content": {"Fn::Join": ["", [
                  "delete: ", {"Ref": "DeleteInfectedFilesParameter"}, "\n",
                  "region: ", {"Ref": "AWS::Region"}, "\n",
                  "queue: ", {"Ref": "ScanQueue"}, "\n",
                  "topic: ", {"Ref": "FindingsTopic"}, "\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {"Fn::Join": ["", [
                  "[main]", "\n",
                  "stack=", {"Ref": "AWS::StackId"}, "\n",
                  "region=", {"Ref": "AWS::Region"}, "\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {"Fn::Join": ["", [
                  "[cfn-auto-reloader-hook]", "\n",
                  "triggers=post.update", "\n",
                  "path=Resources.ScanLaunchConfiguration.Metadata.AWS::CloudFormation::Init", "\n",
                  "action=/opt/aws/bin/cfn-init --verbose --stack=", {"Ref": "AWS::StackName"}, " --region=", {"Ref": "AWS::Region"}, " --resource=ScanLaunchConfiguration", "\n",
                  "runas=root", "\n"
                ]]}
              }
            },
            "commands": {
              "a_enable_freshclam_cron": {
                "command": "sed -i 's/FRESHCLAM_DELAY/#FRESHCLAM_DELAY/g' /etc/sysconfig/freshclam"
              },
              "b_enable_freshclam": {
                "command": "sed -i 's/Example/#Example/g' /etc/freshclam.conf"
              },
              "c_symlink_app_dir": {
                "command": "ln -s /opt/aws-s3-virusscan-master /opt/aws-s3-virusscan",
                "test": "test ! -e /opt/aws-s3-virusscan"
              },
              "d_symlink_app_initd": {
                "command": "ln -s /opt/aws-s3-virusscan/s3-virusscan /etc/init.d/s3-virusscan",
                "test": "test ! -e /etc/init.d/s3-virusscan"
              },
              "e_chmod_app_ruby": {
                "command": "chmod +x *.rb",
                "cwd": "/opt/aws-s3-virusscan"
              },
              "f_chmod_app_initd": {
                "command": "chmod +x s3-virusscan",
                "cwd": "/opt/aws-s3-virusscan"
              },
              "g_update_clamav_db": {
                "command": "freshclam"
              }
            },
            "services": {
              "sysvinit": {
                "awslogs": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "packages": {
                    "yum": ["awslogs"]
                  },
                  "files": ["/etc/awslogs/awslogs.conf"]
                },
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                },
                "s3-virusscan": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": ["/opt/aws-s3-virusscan-master/s3-virusscan.conf"],
                  "sources": ["/opt"]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {"Fn::If": ["HasKeyNameParameter", {"Ref": "KeyNameParameter"}, {"Ref": "AWS::NoValue"}]},
        "AssociatePublicIpAddress": false,
        "EbsOptimized": false,
        "IamInstanceProfile": {"Ref": "ScanInstanceProfile"},
        "ImageId": {"Fn::FindInMap": ["RegionMap", {"Ref": "AWS::Region"}, "AMI"]},
        "InstanceType": {"Ref": "InstanceTypeParameter"},
        "SecurityGroups": [{"Ref": "ScanSecurityGroup"}],
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
          "#!/bin/bash -x", "\n",
          "/opt/aws/bin/cfn-init --verbose --stack=", {"Ref": "AWS::StackName"}, " --region=", {"Ref": "AWS::Region"}, " --resource=ScanLaunchConfiguration", "\n",
          "/opt/aws/bin/cfn-signal --exit-code=$? --stack=", {"Ref": "AWS::StackName"}, " --region=", {"Ref": "AWS::Region"}, " --resource=ScanAutoScalingGroup", "\n"
        ]]}}
      }
    },
    "ScanSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "S3 VirusScan",
        "SecurityGroupEgress": [{
          "IpProtocol": "-1",
          "CidrIp": "0.0.0.0/0"
        }],
        "SecurityGroupIngress": [{
          "CidrIp": "172.18.17.0/24",
          "FromPort": 22,
          "IpProtocol": "tcp",
          "ToPort": 22
        }],
        "VpcId": {"Ref": "VPCParameter"}
      }
    }
  }
}
