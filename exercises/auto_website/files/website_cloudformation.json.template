{
   "AWSTemplateFormatVersion" : "2010-09-09",
   "Description" : "Create AWS Launch Config and Autoscaling group for Auto Website exercise",
   "Parameters" : {
      "Creator" : {
         "Description": "Name of person creating the infrastructure",
         "Type" : "String",
         "Default" : "__CREATOR_ID__"
      },
      "ChefServerPublicIp" : {
         "Description": "Public IP of the Chef Server",
         "Type" : "String",
         "Default" : "__CHEF_SERVER_PUBLIC_IP__"
      },
      "ChefServerUrl" : {
         "Description": "URL of the Chef Server",
         "Type" : "String",
         "Default" : "__CHEF_SERVER_URL__"
      },
      "AmznLinuxAmi" : {
         "Description": "Amazon Linux AMI (us-west-1)",
         "Type" : "String",
         "Default" : "ami-3a674d5a"
      }
   },
   "Resources" : {
      "WebSrvrLaunchConfig" : {
         "Type" : "AWS::AutoScaling::LaunchConfiguration",
         "Properties" : {
            "ImageId" : {"Ref":"AmznLinuxAmi"},
            "InstanceType" : "t2.small",
            "IamInstanceProfile" : {"Fn::ImportValue":{"Fn::Join":["",[{"Ref":"Creator"},"InstProfile"]]}},
            "KeyName" : {"Ref":"Creator"},
            "SecurityGroups" : [
               {"Fn::ImportValue":{"Fn::Join":["",[{"Ref":"Creator"},"SgWebSvr"]]}},
               {"Fn::ImportValue":{"Fn::Join":["",[{"Ref":"Creator"},"SgIcmpInt"]]}},
               {"Fn::ImportValue":{"Fn::Join":["",[{"Ref":"Creator"},"SgSshInt"]]}}
            ],
            "UserData": {"Fn::Base64":{"Fn::Join":["",[
               "#!/bin/bash -xev\n",
               "\n",
               "AWS_BASE_URL=\"http://169.254.169.254/latest/meta-data\"\n",
               "GUID=\"$(printf '%x\\n' $(date +%s))\"\n",
               "NODE_TYPE=\"web-server\"\n",
               "NODE_NAME=\"$NODE_TYPE-$GUID\"\n",
               "INST_ID=\"$(wget -q -O - ${AWS_BASE_URL}/instance-id)\"\n",
               "REGION=\"$(wget -q -O - ${AWS_BASE_URL}/placement/availability-zone|sed -e 's/.$//')\"\n",
               "DATA_KEY_ENCRYPTED=\"data_key.enc\"\n",
               "VALIDATION_PEM_NAME=\"validation.pem\"\n",
               "VALIDATION_PEM=\"/etc/chef/$VALIDATION_PEM_NAME\"\n",
               "\n",
               "# Setup hostname and update instance name tag\n",
               "/bin/hostname $NODE_NAME\n",
               "/sbin/service rsyslog restart\n",
               "/usr/bin/aws ec2 create-tags --resources $INST_ID --tags Key=Name,Value=", {"Ref":"Creator"}, "-$NODE_NAME --region $REGION\n",
               "\n",
               "# Do some chef pre-work\n",
               "/bin/mkdir -p /etc/chef\n",
               "/bin/mkdir -p /var/lib/chef\n",
               "/bin/mkdir -p /var/log/chef\n",
               "\n",
               "# Setup hosts file correctly\n",
               "/bin/cat >> \"/etc/hosts\" << EOF\n",
               {"Ref":"ChefServerPublicIp"}, " chef-server chef-server.", {"Ref":"Creator"}, ".int\n",
               "EOF\n",
               "\n",
               "cd /etc/chef/\n",
               "\n",
               "# Install jq\n",
               "/usr/bin/yum install jq -y\n",
               "# Install chef\n",
               "/usr/bin/curl -L https://omnitruck.chef.io/install.sh | bash || error_exit 'could not install chef'\n",
               "\n",
               "# Create first-boot.json\n",
               "FIRST_BOOT=\"/etc/chef/first-boot.json\"\n",
               "/bin/cat > \"$FIRST_BOOT\" << EOF\n",
               "{\n",
               "   \"run_list\" :[\n",
               "      \"role[web-server]\"\n",
               "   ]\n",
               "}\n",
               "EOF\n",
               "\n",
               "# Create client.rb\n",
               "CLIENT_RB=\"/etc/chef/client.rb\"\n",
               "/bin/echo 'log_location     STDOUT' >> $CLIENT_RB\n",
               "/bin/echo -e \"chef_server_url  '", {"Ref":"ChefServerUrl"}, "'\" >> $CLIENT_RB\n",
               "/bin/echo -e \"validation_client_name '", {"Ref":"Creator"}, "-validator'\" >> $CLIENT_RB\n",
               "/bin/echo -e \"node_name  '${NODE_NAME}'\" >> $CLIENT_RB\n",
               "\n",
               "# Get encrypted files (data key & validation.pem) and decrypt the pem\n",
               "/usr/bin/aws s3 cp s3://", {"Ref":"Creator"}, "/chef/$DATA_KEY_ENCRYPTED /tmp/$DATA_KEY_ENCRYPTED\n",
               "/usr/bin/aws s3 cp s3://", {"Ref":"Creator"}, "/chef/${VALIDATION_PEM_NAME}.enc ${VALIDATION_PEM}.enc\n",
               "data_key=$(/usr/bin/aws kms decrypt --ciphertext-blob fileb:///tmp/$DATA_KEY_ENCRYPTED --region $REGION | jq -r .Plaintext)\n",
               "/usr/bin/openssl enc -d -in ${VALIDATION_PEM}.enc -out $VALIDATION_PEM -pass pass:$data_key -aes-256-cbc\n",
               "data_key=\"\"\n",
               "\n",
               "# Get Chef SSL cert\n",
               "/usr/bin/knife ssl fetch -c $CLIENT_RB\n",
               "\n",
               "# Run chef-client\n",
               "/usr/bin/sudo /usr/bin/chef-client -j $FIRST_BOOT\n",
               "\n",
               "# Update instance name tag\n",
               "/usr/bin/aws ec2 create-tags --resources $INST_ID --tags Key=Name,Value=", {"Ref":"Creator"}, "-$NODE_NAME --region $REGION\n"
            ]]}}
         }
      },
      "WebSrvrAutoScalingGrp" : {
         "Type" : "AWS::AutoScaling::AutoScalingGroup",
         "Properties" : {
            "VPCZoneIdentifier" : [
               {"Fn::ImportValue":{"Fn::Join":["",[{"Ref":"Creator"},"SubnetInt1"]]}},
               {"Fn::ImportValue":{"Fn::Join":["",[{"Ref":"Creator"},"SubnetInt2"]]}}
            ],
            "HealthCheckGracePeriod" : 600,
            "HealthCheckType" : "ELB",
            "LaunchConfigurationName" : {"Ref":"WebSrvrLaunchConfig"},
            "LoadBalancerNames" : [{"Fn::ImportValue":{"Fn::Join":["",[{"Ref":"Creator"},"ELB"]]}}],
            "MinSize" : "2",
            "MaxSize" : "6",
            "DesiredCapacity" : "2",
            "Tags" : [{"Key":"Name","Value":{"Fn::Join":["",[{"Ref":"Creator"},"-web-server"]]},"PropagateAtLaunch":"true"}]
         }
      },
      "WebSrvScaling": {
        "Type": "AWS::AutoScaling::ScalingPolicy",
        "Properties": {
          "AdjustmentType": "ChangeInCapacity",
          "AutoScalingGroupName": {"Ref":"WebSrvrAutoScalingGrp"},
          "Cooldown": "300",
          "PolicyType" : "TargetTrackingScaling",
          "TargetTrackingConfiguration": {
             "PredefinedMetricSpecification": {
                "PredefinedMetricType": "ASGAverageCPUUtilization"
             },
             "TargetValue": "50"
          }
        }
      }     
   }
}
