# CodeBuild project Buildspec to deploy serverless resources
# via Serverless Framework
#
# required environment variables
#
#  ARTIFACTS_LOCATION         = S3 bucket name/path for the artifacts upload
#  ARTIFACT_NAME              = Artifact to create
#  ENVIRONMENT                = Environment
#  LAMBDA_LAYER               = Lambda layer to update
#  LAMBDA_LAYER_ARN_SSM_PARAM = SSM parameter containing the Lambda layer's ARN

version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.7
      # nodejs: 10  # nodejs 10.x already included (choices: 8, 10)
    commands:
      - phase="INSTALL"
      - npm install --global serverless
      - npm install
      - pip install --upgrade pip
      - node --version
      - pip --version
      - python --version
      - serverless --version
      - git --version
      - env | grep CODEBUILD | sort
      - cat versions
      - cat /codebuild/output/tmp/dir.txt
      - cat /codebuild/output/tmp/script.sh
      - cat /codebuild/output/tmp/env.sh
      # show git stuff
      - echo "git repo = $(basename $(git remote get-url origin) .git)"
      - echo "git branch (CB) = ${CODEBUILD_WEBHOOK_HEAD_REF##*/}"
      - echo "git commit (CB) = $CODEBUILD_SOURCE_VERSION"
      - echo "git commit (CB) [resolved] = $CODEBUILD_RESOLVED_SOURCE_VERSION"
      - echo "git last log = $(git log -1)"
      - echo "git branch (git) = $(git rev-parse --quiet --abbrev-ref HEAD)"
      - echo "git commit (git) = $(git rev-parse --quiet HEAD)"
        # - last_pr=$(git show-ref 2> /dev/null | grep pull | sort -t'/' -h -k3 | tail -1 | awk '{print $1"="$2}')
      - last_pr=$(git show-ref 2> /dev/null | grep pull | sort -r -t/ -h -k3 | sed -n 1p | awk '{print $1"="$2}')
      - last_pr_branch=${last_pr#*=}
      - last_pr_commit=${last_pr%=*}
      - last_pr_branch_name_a=$(git branch --contains $last_pr_commit | awk '{print $1}')
      - last_pr_branch_name_b=$(git name-rev $last_pr_commit)
      - next_to_last_pr=$(git show-ref 2> /dev/null | grep pull | sort -r -t/ -h -k3 | sed -n 2p | awk '{print $1"="$2}')
      - next_to_last_pr_branch=${next_to_last_pr#*=}
      - next_to_last_pr_commit=${next_to_last_pr%=*}
      - next_to_last_pr_branch_name=$(git branch --contains $next_to_last_pr_commit | awk '{print $1}')
      - echo "branch name from last PR [$last_pr_branch ($last_pr_commit)] = '$last_pr_branch_name_a' or '$last_pr_branch_name_b'"
      - echo "can delete branch name of next to last PR ['$next_to_last_pr_branch'|'$next_to_last_pr_commit'|'$next_to_last_pr_branch_name'] (ref|commit|branch) with the command; 'git push origin --delete $next_to_last_pr_branch_name'"
      - git show-ref
      - git remote -v
      # - git ls-remote  # doesn't work in CodeBuild
      # restore deleted branch
      # - git checkout -b ${CODEBUILD_WEBHOOK_HEAD_REF##*/} $CODEBUILD_RESOLVED_SOURCE_VERSION
      # - git checkout -b $last_pr_branch_name $last_pr_commit
    finally:
      - echo "$phase - phase COMPLETE"
  pre_build:
    commands:
      - phase="PRE_BUILD"
      # get info about Serverless infra
      - echo "$phase - NOT testing serverless configurations"
      # - echo "$phase - testing serverless configurations"
      # - bash sls_control.sh -a info -s $ENVIRONMENT -v -x
      # - echo "$phase - all serverless configuration tests PASSED"
    finally:
      - echo "$phase - phase COMPLETE"
  build:
    commands:
      - phase="BUILD"
      # update Lambda Layer (script checks for mandatory change(s) first)
      - echo "$phase - attempting to update the Python third-party Lambda layer"
      - bash update_third_party_python_lambda_layer.sh
      - echo "$phase - the Python third-party Lambda layer update script SUCCEEDED"
      # deploy Serverless infra
      # TODO - delete these lines (dry-run) and un-comment the rest when ready
      - echo "$phase - deploying serverless infrastructure (DRY-RUN)" # dry-run
      - bash sls_control.sh -a deploy -s $ENVIRONMENT -v -x -d        # dry-run (-d)
      # TODO - un-comment when ready
      # - echo "$phase - deploying serverless infrastructure"
      # - bash sls_control.sh -a deploy -s $ENVIRONMENT -v -x
      - echo "$phase - all serverless deployments SUCCEEDED"
    finally:
      - echo "$phase - phase COMPLETE"
