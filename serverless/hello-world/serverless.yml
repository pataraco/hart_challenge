# --------------------------------------------
# Originally created with (and then modified):
#    $ sls create -t aws-nodejs -p hello-world
# Tested with:
#   Lambda Function
#    $ sls invoke local -f hello
#    $ sls invoke local -f hello -d '{"Key": "Val"}'
#   API
#    $ npm install serverless-offline --save-dev
#    $ sls offline
# Deployed with:
#    $ sls deploy [-s stage] [-r region] [-f function]
# Removed with:
#    $ sls remove
# Logs with:
#    $ sls logs -f FUNCTION [--startTime 5m] [-t | --tail]
# --------------------------------------------
service: hello-world
plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev         # default (override: --stage  CL option)
  region: us-west-2  # default (override: --region CL option)
  memorySize: 256    # lambda functions default (can override below)
  timeout: 10        # lambda functions default (can override below)

functions:
  add:
    handler: add.add
    events:
      - http:  # API Gateway event (default: Lambda Proxy)
          path: math/add  # must be double indented
          method: post
          cors: true
  body-mapped-add:
    handler: body-mapped-add.add
    events:
      - http:  # API Gateway event
          path: math/body-mapped-add  # must be double indented
          method: post
          integration: lambda    # otherwise, defaults to lambda proxy
          request:
            template:
              # VTL info:
              # docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
              application/json: >
                #set($inputRoot = $input.path('$'))
                {
                  "n1": $inputRoot.input.num1,
                  "n2": $inputRoot.input.num2
                }
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "'application/json'"
            template: >
              #set($inputRoot = $input.path('$'))
              {
                "result": $inputRoot.result
              }
          cors: true
  hello:
    handler: handler.hello
    memorySize: 128
    timeout: 3
    vpc:
      subnetIds:
        - subnet-cbd08291
        - subnet-c54a0abc
      securityGroupIds:
        - sg-f1b2d781

# Original File Below
# Created with: $ sls create -t aws-nodejs -p hello-world
# --------------------------------------------
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

# service: hello-world
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# provider:
#   name: aws
#   runtime: nodejs12.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

# functions:
#  hello:
#    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
