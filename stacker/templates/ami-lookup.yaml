AWSTemplateFormatVersion: '2010-09-09'
Description: Onica Platform - Core - AMI Lookup - 1.19.0
Outputs:
  AccessPolicy:
    Description: Policy allowing use of the AMI lookup lambda function
    Export:
      Name: {'Fn::Sub': '${AWS::StackName}-AccessPolicy'}
    Value: {Ref: AmiLookupAccessPolicy}
  FunctionArn:
    Description: AMI lookup function Arn
    Export:
      Name: {'Fn::Sub': '${AWS::StackName}-FunctionArn'}
    Value:
      Fn::GetAtt: [AMILookup, Arn]
  FunctionName:
    Description: AMI lookup function name
    Export:
      Name: {'Fn::Sub': '${AWS::StackName}-FunctionName'}
    Value: {Ref: AMILookup}
  FunctionRegion:
    Description: AMI lookup function region
    Value: {Ref: 'AWS::Region'}
Parameters:
  CustomerName: {AllowedPattern: '[-_ a-z]*', Default: '', Description: 'The nickname
      for the new customer. Must be all lowercase letters, should not contain spaces
      or special characters, nor should it include any part of EnvironmentName.',
    Type: String}
  EnvironmentName: {Default: common, Description: Name of Environment, Type: String}
Resources:
  AMILookup:
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - ''
          - ["\"\"\"Finds the latest AMI for a given platform.\"\"\"\n\nimport re\n\
              import logging\nimport sys\nimport boto3\n\nLOGGER = logging.getLogger(__name__)\n\
              # Set to DEBUG to see details in lambda logs; ERROR for production\n\
              LOGGER.setLevel('ERROR')\nUBUNTUPATTERN = re.compile(r\"^ubuntu-([0-9]{2,2})\\\
              .([0-9]{2,2})$\")\n\n\ndef describe_images(platform, region):\n    \"\
              \"\"Determine AMI filters.\"\"\"\n    ami_filters = [\n        {'Name':\
              \ 'architecture', 'Values': ['x86_64']},\n        {'Name': 'is-public',\
              \ 'Values': ['true']},\n        {'Name': 'root-device-type', 'Values':\
              \ ['ebs']},\n        {'Name': 'state', 'Values': ['available']},\n \
              \       {'Name': 'virtualization-type', 'Values': ['hvm']}\n    ]\n\
              \    ami_owners = []\n\n    # Using naming conventions from\n    # https://github.com/test-kitchen/kitchen-ec2/tree/master/lib/kitchen/driver/aws/standard_platform\n\
              \    if platform == 'centos-7':\n        ami_filters.extend([\n    \
              \        {'Name': 'owner-id', 'Values': ['679593333241']},\n       \
              \     {'Name': 'product-code', 'Values': ['aw0evgkw8e5c1q413zgy5pjce']}\n\
              \        ])\n        ami_owners = ['aws-marketplace']\n    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html\n\
              \    elif platform == 'amazon-hvm64':\n        ami_filters.extend([\n\
              \            {'Name': 'name', 'Values': ['amzn-ami-hvm*x86_64-gp2']}\n\
              \        ])\n        ami_owners = ['amazon']\n    elif UBUNTUPATTERN.match(platform):\n\
              \        i = UBUNTUPATTERN.match(platform)\n        ami_filters.extend([\n\
              \            {'Name': 'name',\n             'Values': ['ubuntu/images/*/ubuntu-*-%s.%s*'\
              \ % (i.groups()[0],\n                                              \
              \               i.groups()[1])]},\n            {'Name': 'owner-id',\
              \ 'Values': ['099720109477']}\n        ])\n    elif platform in ['windows-2012r2',\
              \ 'windows-2016']:\n        win_filter = [{'Name': 'owner-alias', 'Values':\
              \ ['amazon']}]\n        if platform == 'windows-2012r2':\n         \
              \   win_filter.append(\n                {'Name': 'name',\n         \
              \        'Values': ['Windows_Server-2012-R2_RTM-English-*-Base-*',\n\
              \                            'Windows_Server-2012-R2_SP*-English-*-Base-*']}\n\
              \            )\n        elif platform == 'windows-2016':\n         \
              \   win_filter.append(\n                {'Name': 'name',\n         \
              \        'Values': ['Windows_Server-2016-English-Full-Base-*']}\n  \
              \          )\n        ami_filters.extend(win_filter)\n    else:\n  \
              \      LOGGER.error('Platform %s not supported', platform)\n       \
              \ ami_filters = []\n\n    if ami_filters is not []:\n        client\
              \ = boto3.client('ec2', region_name=region)\n\n        return client.describe_images(\n\
              \            ExecutableUsers=['all'],  # public images\n           \
              \ Owners=ami_owners,\n            Filters=ami_filters\n        )\n \
              \   else:\n        return {'ResponseMetadata': 'Invalid platform provided'}\n\
              \n\ndef handler(event, context):\n    \"\"\"Lambda entry point.\"\"\"\
              \n    if event.get('ResourceProperties'):  # Invoked as CFN custom resource\n\
              \        import cfnresponse  # pylint: disable=import-error\n      \
              \  # Bypass all execution when the 'resource' is being deleted\n   \
              \     if event['RequestType'] == 'Delete':\n            cfnresponse.send(event,\
              \ context, cfnresponse.SUCCESS, {}, False)\n            return True\n\
              \        region = event['ResourceProperties']['Region']\n        platform\
              \ = event['ResourceProperties']['Platform']\n    else:  # invoked directly\n\
              \        region = event['Region']\n        platform = event['Platform']\n\
              \n    describe_response = describe_images(platform, region)\n\n    response_data\
              \ = {}\n    if 'Images' in describe_response and describe_response['Images']\
              \ != []:\n        # Get ami from last dict in the list of matching Images\n\
              \        sorted_images = sorted(describe_response['Images'],\n     \
              \                          key=lambda k: k['Name'])\n        latest_ami\
              \ = sorted_images[-1]\n        if platform.startswith('amazon-'):\n\
              \            # Ensure rc images aren't included\n            for i in\
              \ reversed(sorted_images):\n                if '.rc-' in latest_ami['Name']:\n\
              \                    latest_ami = i\n        response_data['ImageId']\
              \ = latest_ami['ImageId']\n        response_data['Name'] = latest_ami['Name']\n\
              \        if 'cfnresponse' in sys.modules:\n            response_code\
              \ = cfnresponse.SUCCESS\n    elif 'cfnresponse' in sys.modules:\n  \
              \      response_code = cfnresponse.FAILED\n        response_data['Data']\
              \ = describe_response['ResponseMetadata']\n\n    LOGGER.info('Returning\
              \ response data: %s', str(response_data))\n    if 'cfnresponse' in sys.modules:\n\
              \        cfnresponse.send(event, context, response_code, response_data,\
              \ False)\n    else:\n        return response_data\n"]
      Description: Find latest AMI for given platform
      Handler: index.handler
      Role:
        Fn::GetAtt: [AMILookupLambdaRole, Arn]
      Runtime: python2.7
      Timeout: 60
    Type: AWS::Lambda::Function
  AMILookupLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
      Policies:
      - PolicyDocument:
          Statement:
          - Action: ['ec2:DescribeImages']
            Effect: Allow
            Resource: ['*']
            Sid: AMIAccess
          Version: '2012-10-17'
        PolicyName:
          Fn::Join:
          - '-'
          - - amilookup-lambda-role
            - {Ref: EnvironmentName}
            - {Ref: CustomerName}
    Type: AWS::IAM::Role
  AmiLookupAccessPolicy:
    Properties:
      Description: Allows invocation of the AMI lookup lambda function.
      Path: /
      PolicyDocument:
        Statement:
        - Action: ['lambda:InvokeFunction']
          Effect: Allow
          Resource:
          - Fn::GetAtt: [AMILookup, Arn]
        Version: '2012-10-17'
    Type: AWS::IAM::ManagedPolicy
